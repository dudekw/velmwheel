import("rtt_ros")
ros.import("rtt_rosparam")
ros.import("rtt_rospack")

ros.import("ec_hardware")
ros.import("ec_drivers")
ros.import("ec_drivers")

ros.import("velmwheel_core")
ros.import("velmwheel_fusion")
ros.import("velmwheel_laser_driver")
ros.import("velmwheel_bias_estimator")
ros.import("velmobil_gl")

ros.import("rtt_nav_msgs")
ros.import("rtt_std_msgs")
ros.import("rtt_visualization_msgs")
ros.import("rtt_sensor_msgs")
ros.import("rtt_tf2_msgs")

ros.import("rtt_geometry_msgs")
require("print")

loadComponent("VelmWheelInterface_EC","ECHardware")
setActivity("VelmWheelInterface_EC", 0.001, 6, ORO_SCHED_RT)
VelmWheelInterface_EC.loadService("rosparam")
VelmWheelInterface_EC.loadService("elmo_driver")
VelmWheelInterface_EC.loadService("imu_driver")
VelmWheelInterface_EC.rosparam.getAll()
VelmWheelInterface_EC.configure();

stream("VelmWheelInterface_EC.Imu.IMU_Msr_OUTPORT", ros.comm.topic("imu_raw"))

VelmWheelInterface_EC.start();

while (VelmWheelInterface_EC.wheel_rl.state == 1 || VelmWheelInterface_EC.wheel_rr.state == 1 || VelmWheelInterface_EC.wheel_fl.state == 1 || VelmWheelInterface_EC.wheel_fr.state == 1) {
	print.ln("At least one motor controller in state 1");
}


if (VelmWheelInterface_EC.wheel_rl.state == 8) then VelmWheelInterface_EC.wheel_rl.resetFault()

if (VelmWheelInterface_EC.wheel_rr.state == 8) then VelmWheelInterface_EC.wheel_rr.resetFault()

if (VelmWheelInterface_EC.wheel_fl.state == 8) then VelmWheelInterface_EC.wheel_fl.resetFault()

if (VelmWheelInterface_EC.wheel_fr.state == 8) then VelmWheelInterface_EC.wheel_fr.resetFault()

while (VelmWheelInterface_EC.wheel_rl.state != 4 || VelmWheelInterface_EC.wheel_rr.state != 4 || VelmWheelInterface_EC.wheel_fl.state != 4 || VelmWheelInterface_EC.wheel_fr.state != 4) {
	print.ln("At least one motor controller NOT in state 4");

}


	VelmWheelInterface_EC.wheel_fl.enable()
	VelmWheelInterface_EC.wheel_fr.enable()
	VelmWheelInterface_EC.wheel_rl.enable()
	VelmWheelInterface_EC.wheel_rr.enable()

	print.ln("all motors enabled");


loadComponent("VelmWheel_Core","VelmWheelCore")
setActivity("VelmWheel_Core", 0.001, 5, ORO_SCHED_RT)
VelmWheel_Core.configure();

connect("VelmWheel_Core.wrl_port","VelmWheelInterface_EC.wheel_rl.motor_velocity_command", ConnPolicy())
connect("VelmWheel_Core.wfl_port","VelmWheelInterface_EC.wheel_fl.motor_velocity_command", ConnPolicy())
connect("VelmWheel_Core.wfr_port","VelmWheelInterface_EC.wheel_fr.motor_velocity_command", ConnPolicy())
connect("VelmWheel_Core.wrr_port","VelmWheelInterface_EC.wheel_rr.motor_velocity_command", ConnPolicy())

connect("VelmWheel_Core.in_wrl_enc_pos","VelmWheelInterface_EC.wheel_rl.motor_position", ConnPolicy())
connect("VelmWheel_Core.in_wfl_enc_pos","VelmWheelInterface_EC.wheel_fl.motor_position", ConnPolicy())
connect("VelmWheel_Core.in_wfr_enc_pos","VelmWheelInterface_EC.wheel_fr.motor_position", ConnPolicy())
connect("VelmWheel_Core.in_wrr_enc_pos","VelmWheelInterface_EC.wheel_rr.motor_position", ConnPolicy())

connect("VelmWheel_Core.in_wrl_enc_vel","VelmWheelInterface_EC.wheel_rl.motor_velocity", ConnPolicy())
connect("VelmWheel_Core.in_wfl_enc_vel","VelmWheelInterface_EC.wheel_fl.motor_velocity", ConnPolicy())
connect("VelmWheel_Core.in_wfr_enc_vel","VelmWheelInterface_EC.wheel_fr.motor_velocity", ConnPolicy())
connect("VelmWheel_Core.in_wrr_enc_vel","VelmWheelInterface_EC.wheel_rr.motor_velocity", ConnPolicy())

stream("VelmWheel_Core.in_twist", ros.comm.topic("cmd_vel"));
stream("VelmWheel_Core.out_odometry", ros.comm.topic("odom"));



	VelmWheel_Core.start()

	loadComponent("VelmWheel_laser_driver_F","VelmWheelLaserDriver")
	setActivity("VelmWheel_laser_driver_F", 0.02, 5, ORO_SCHED_RT)
	VelmWheel_laser_driver_F.loadService("rosparam")
	VelmWheel_laser_driver_F.rosparam.getAll()
	VelmWheel_laser_driver_F.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_laser_driver/merged_scan_frame")
	VelmWheel_laser_driver_F.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_laser_driver/hosts")
	VelmWheel_laser_driver_F.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_laser_driver/useNTP")
	# ID of the laser in the velmwheel_laser_driver param file
	VelmWheel_laser_driver_F.laser_config = 0;
	VelmWheel_laser_driver_F.configure();
	stream("VelmWheel_laser_driver_F.out_laser", ros.comm.topic("/laser_front"));
	VelmWheel_laser_driver_F.start()

	loadComponent("VelmWheel_laser_driver_R","VelmWheelLaserDriver")
	setActivity("VelmWheel_laser_driver_R", 0.02, 5, ORO_SCHED_RT)
	VelmWheel_laser_driver_R.loadService("rosparam")
	VelmWheel_laser_driver_R.rosparam.getAll()
	VelmWheel_laser_driver_R.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_laser_driver/merged_scan_frame")
	VelmWheel_laser_driver_R.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_laser_driver/hosts")
	VelmWheel_laser_driver_R.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_laser_driver/useNTP")
	# ID of the laser in the velmwheel_laser_driver param file
	VelmWheel_laser_driver_R.laser_config = 1;
	VelmWheel_laser_driver_R.configure();
	stream("VelmWheel_laser_driver_R.out_laser", ros.comm.topic("/laser_rear"));
	VelmWheel_laser_driver_R.start()

	loadComponent("VelmWheel_Fusion","VelmWheelFusion")
	setActivity("VelmWheel_Fusion", 0.001, 5, ORO_SCHED_RT)
	VelmWheel_Fusion.configure();
	stream("VelmWheel_Fusion.in_twist", ros.comm.topic("cmd_vel"));
	connect("VelmWheel_Fusion.in_odometry","VelmWheel_Core.out_odometry", ConnPolicy())
	stream("VelmWheel_Fusion.out_odometry", ros.comm.topic("ekf/odometry"));
	stream("VelmWheel_Fusion.out_odom_tf", ros.comm.topic("tf"));
	stream("VelmWheel_Fusion.in_global_localization",ros.comm.topic("/pose2D"))

	VelmWheel_Fusion.start()

	loadComponent("VelmWheel_bias_estimator","VelmWheelBiasEstimator")
	setActivity("VelmWheel_bias_estimator", 0.02, 5, ORO_SCHED_RT)
	VelmWheel_bias_estimator.loadService("rosparam")
	VelmWheel_bias_estimator.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_bias_estimator/P_init")
	VelmWheel_bias_estimator.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_bias_estimator/Q")
	VelmWheel_bias_estimator.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/VelmWheel_bias_estimator/alpha")
	VelmWheel_bias_estimator.configure();
	stream("VelmWheel_bias_estimator.in_laser", ros.comm.topic("/pose2D"));
	connect("VelmWheel_bias_estimator.in_imu","VelmWheelInterface_EC.Imu.IMU_Msr_OUTPORT", ConnPolicy())
	stream("VelmWheel_bias_estimator.out_imu", ros.comm.topic("/imu_processed"));
	stream("VelmWheel_bias_estimator.out_theta", ros.comm.topic("/bias_estimator/theta"));
	stream("VelmWheel_bias_estimator.localization_initialized", ros.comm.topic("/localization_initialized"));
	VelmWheel_bias_estimator.start()

	loadComponent("velmobil_global_localization","VelmobilGlobalLocalization")
	velmobil_global_localization.loadService("rosparam")
	velmobil_global_localization.rosparam.getAbsolute("/VELMWHEEL_OROCOS_ROBOT/velmobil_global_localization/min_intensity")
	velmobil_global_localization.rosparam.getAll()
	setActivity("velmobil_global_localization", 0.02, 5, ORO_SCHED_RT)
	velmobil_global_localization.configure();
	connect("VelmWheel_bias_estimator.in_odom_transform","VelmWheel_Fusion.out_odom_tf", ConnPolicy())
	stream("velmobil_global_localization.in_laser_front", ros.comm.topic("/laser_front"));
	stream("velmobil_global_localization.in_laser_rear",  ros.comm.topic("/laser_rear"));
	stream("velmobil_global_localization.out_markers",  ros.comm.topic("/visualization_marker"));
	velmobil_global_localization.start()

